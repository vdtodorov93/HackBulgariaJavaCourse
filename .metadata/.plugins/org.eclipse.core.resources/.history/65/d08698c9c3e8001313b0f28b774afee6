package com.hackbulgaria.corejava;

import java.util.Arrays;

public class Problems2Impl implements Problems2 {

    @Override
    public boolean isOdd(int number) {
        return number % 2 != 0;
    }

    @Override
    public boolean isPrime(int number) {
        for(int i = 2; i <= Math.sqrt(number); i++){
            if(number % i == 0) return false;
        }
        return true;
    }

    @Override
    public int min(int... array) {
        int minEl = array[0];
        for(int i = 0; i < array.length; i++){
            if(array[i] < minEl) minEl = array[i];
        }
        
        return minEl;
    }

    @Override
    public int kthMin(int k, int[] array) {
        Arrays.sort(array);
        return array[k-1];
    }

    @Override
    public float getAverage(int[] array) {
        int avg = 0;
        for(int i = 0; i < array.length; i++){
            avg += array[i];
        }
        
        return avg / (float)array.length;
    }

    
    private long gcd(long a, long b){
        if(b == 0) return a;
        if(a > b) return gcd(b, a % b);
        return gcd(a, b % a);
    }
    
    @Override
    public long getSmallestMultiple(int upperBound) {
        long result = 1;
        for(long i = 2; i <= upperBound; i++){
            long gc = gcd(result, i);
            result *= (i / gc);
        }
        
        return result;
    }

    @Override
    public long getLargestPalindrome(long N) {
        N--;
        while(N > 0){
            if(isPalindrome(N)) break;
            else N--;
        }
        
        return N;
    }

    private boolean isPalindrome(long n) {
        long reverse = 0;
        long copyNumber = n;
        while(copyNumber > 0){
            reverse *= 10;
            reverse += copyNumber % 10;
            copyNumber /= 10;
        }
        
        return n == reverse;
    }

    @Override
    public int[] histogram(short[][] image) {
        int[] hist = new int[256];
        for(int i = 0; i < 256; i++) hist[i] = 0;
        for(int i = 0; i < image.length; i++){
            for(int j = 0; j < image[i].length; j++){
                hist[image[i][j]]++;
            }
        }
        
        return hist;
    }

    @Override
    public long doubleFac(int n) {
        int result = 1;
        for(int i = 2; i <= n; i++){
            result *= i;
        }
        int resultFact = 1;
        for(int i = 2; i <= result; i++){
            resultFact *= i;
        }
        return resultFact ;
    }

    @Override
    public long kthFac(int k, int n) {
        long result = 1;
        long copyN = n;
        for(int i = 0; i < k; i++){
            for(int j = 2; j <= copyN; j++){
                result *= j;
            }
            copyN = result;
            result = 1;
        }
        
        return copyN;
    }

    @Override
    public int getOddOccurrence(int[] array) {
        int result = array[0];
        for(int i = 1; i < array.length; i++){
            result = result ^ array[i];
        }
        
        return result;
    }

    private long powHelper(int a, int b){
        if(b == 0) return 1;
        if(b == 1) return a;
        if(b == 2) return a * a;
        
        long square = powHelper(a, b/2);
        square = square * square;
        if(isOdd(b))
        {
            return a * square;
        }
        else return square;
    }
    
    @Override
    public long pow(int a, int b) {
        return powHelper(a, b);
    }

    @Override
    public long maximalScalarSum(int[] a, int[] b) {
        int max = 0;
        Arrays.sort(a);
        Arrays.sort(b);
        for(int i = 0; i < a.length; i++){
            max += a[i] * b[i];
        }
        return max;
    }

    @Override
    public int maxSpan(int[] array) {
        int maxSpan = 1;
        for(int i = 0; i < array.length; i++){
            for(int j = array.length - 1; j >= i; j--){
                if(array[i] == array[j] && j - i + 1 > maxSpan){
                    maxSpan = j - i + 1;
                }
            }
        }
        return maxSpan;
    }

    @Override
    public boolean canBalance(int[] array) {
        int left = 1;
        int sumLeft = array[0];
        int sumRight = array[array.length - 1];
        int right = array.length - 2;
        while(left < right){
            if(sumLeft < sumRight){
                left++;
                sumLeft += array[left];
            }
            else{
                right--;
                sumRight += array[right];
            }
        }
        
        return sumLeft == sumRight;
    }

    @Override
    public int[][] rescale(int[][] original, int newWidth, int newHeight) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String reverseMe(String argument) {
        return new StringBuilder(argument).reverse().toString();
    }

    @Override
    public String copyEveryChar(String input, int k) {
        StringBuilder result = new StringBuilder();
        for(int i = 0; i < input.length(); i++){
            for(int j = 0; j < k; j++) result.append(input.charAt(i));
        }
        return result.toString();
    }

    @Override
    public String reverseEveryWord(String arg) {
        String[] splitted = arg.split(" ");
        for(int i = 0; i < splitted.length; i++){
            splitted[i] = new StringBuilder(splitted[i]).reverse().toString();
        }
        StringBuilder result = new StringBuilder("");
        for(int i = 0; i < splitted.length - 1; i++){
            result.append(splitted[i]);
            result.append(' ');
        }
        result.append(splitted[splitted.length - 1]);
        return result.toString();
    }

    @Override
    public boolean isPalindrome(String argument) {
        return argument.equals(new StringBuilder(argument).reverse().toString());
    }

    @Override
    public boolean isPalindrome(int number) {
        int reverse = 0;
        int copyNumber = number;
        while(copyNumber > 0){
            reverse *= 10;
            reverse += copyNumber % 10;
            copyNumber /= 10;
        }
        
        return number == reverse;
    }

    @Override
    public int getPalindromeLength(String input) {
        int left = input.indexOf('*') - 1;
        int right = left + 2;
        int len = 0;
        while(left >= 0 && right < input.length()){
            if(input.charAt(left) != input.charAt(right)) break;
            else{
                left--;
                right++;
                len++;
            }
        }
        return len;
    }

    @Override
    public int countOcurrences(String needle, String haystack) {
        return (haystack.length() - haystack.replace(needle, "").length()) / needle.length();
    }

    @Override
    public String decodeURL(String input) {
        // %20=>' ' %3A=>':' %3D=>'?' %2F=>'/'
        return input.replace("%20", " ").replace("%3A", ":").replace("%3D", "?").replace("%2F", "/");
    }

    @Override
    public int sumOfNumbers(String input) {
        String[] numbers = input.split("([^0-9-])+", -1);
        int sum = 0;
        for(int i = 0; i < numbers.length; i++){
            if(!numbers[i].equals(""))sum += Integer.parseInt(numbers[i]);
        }
        return sum;
    }

    @Override
    public boolean areAnagrams(String A, String B) {
        A = A.toLowerCase();
        A = A.replaceAll("\\s","");
        B = B.toLowerCase();
        B = B.replaceAll("\\s","");
        char[] a = A.toCharArray();
        char[] b = B.toCharArray();
        Arrays.sort(a);
        Arrays.sort(b);
        if(a.length != b.length) return false;
        for(int i = 0; i < a.length; i++){
            if(a[i] != b[i]) return false;
        }
        return true;
    }

    @Override
    public boolean hasAnagramOf(String string, String string2) {
        for(int i = 0; i < string2.length(); i++){
            for(int j = i + 1; j <= string2.length(); j++){
                String substr = string2.substring(i, j);
                if(areAnagrams(string, substr)){
                    return true;
                }
            }
        }
        return false;
    }

}
